{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4b401f29-4822-49f9-b829-3695b2f82819",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score, classification_report, confusion_matrix\n",
    "from sklearn.neighbors import NearestNeighbors\n",
    "from sklearn.model_selection import train_test_split\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "54244d24-ac6b-4e7b-83f9-fae9f664ff64",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load dataset\n",
    "df = pd.read_csv(\"C:/Users/Cptzeph/Desktop/documents/BCS/Y4/S2/Project 2/dataset/data.csv\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a21a52b8-8ab1-4ec5-b99e-30c06569833f",
   "metadata": {},
   "source": [
    "## EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "047569a3-5760-4b2a-829d-23094c1e5dab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "      <th>MEDV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.00632</td>\n",
       "      <td>18.0</td>\n",
       "      <td>2.31</td>\n",
       "      <td>0</td>\n",
       "      <td>0.538</td>\n",
       "      <td>6.575</td>\n",
       "      <td>65.2</td>\n",
       "      <td>4.0900</td>\n",
       "      <td>1</td>\n",
       "      <td>296</td>\n",
       "      <td>15.3</td>\n",
       "      <td>396.90</td>\n",
       "      <td>4.98</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.02731</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>6.421</td>\n",
       "      <td>78.9</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "      <td>17.8</td>\n",
       "      <td>396.90</td>\n",
       "      <td>9.14</td>\n",
       "      <td>21.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.02729</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.07</td>\n",
       "      <td>0</td>\n",
       "      <td>0.469</td>\n",
       "      <td>7.185</td>\n",
       "      <td>61.1</td>\n",
       "      <td>4.9671</td>\n",
       "      <td>2</td>\n",
       "      <td>242</td>\n",
       "      <td>17.8</td>\n",
       "      <td>392.83</td>\n",
       "      <td>4.03</td>\n",
       "      <td>34.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.03237</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>6.998</td>\n",
       "      <td>45.8</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222</td>\n",
       "      <td>18.7</td>\n",
       "      <td>394.63</td>\n",
       "      <td>2.94</td>\n",
       "      <td>33.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.06905</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.18</td>\n",
       "      <td>0</td>\n",
       "      <td>0.458</td>\n",
       "      <td>7.147</td>\n",
       "      <td>54.2</td>\n",
       "      <td>6.0622</td>\n",
       "      <td>3</td>\n",
       "      <td>222</td>\n",
       "      <td>18.7</td>\n",
       "      <td>396.90</td>\n",
       "      <td>5.33</td>\n",
       "      <td>36.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD  TAX  PTRATIO  \\\n",
       "0  0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296     15.3   \n",
       "1  0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242     17.8   \n",
       "2  0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242     17.8   \n",
       "3  0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222     18.7   \n",
       "4  0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222     18.7   \n",
       "\n",
       "        B  LSTAT  MEDV  \n",
       "0  396.90   4.98  24.0  \n",
       "1  396.90   9.14  21.6  \n",
       "2  392.83   4.03  34.7  \n",
       "3  394.63   2.94  33.4  \n",
       "4  396.90   5.33  36.2  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4326278a-82c8-4740-9de9-30c8b41b5141",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(511, 14)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "202212ac-6651-4fff-a247-9bae5ac08576",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 511 entries, 0 to 510\n",
      "Data columns (total 14 columns):\n",
      " #   Column   Non-Null Count  Dtype  \n",
      "---  ------   --------------  -----  \n",
      " 0   CRIM     511 non-null    float64\n",
      " 1   ZN       511 non-null    float64\n",
      " 2   INDUS    511 non-null    float64\n",
      " 3   CHAS     511 non-null    int64  \n",
      " 4   NOX      511 non-null    float64\n",
      " 5   RM       506 non-null    float64\n",
      " 6   AGE      511 non-null    float64\n",
      " 7   DIS      511 non-null    float64\n",
      " 8   RAD      511 non-null    int64  \n",
      " 9   TAX      511 non-null    int64  \n",
      " 10  PTRATIO  511 non-null    float64\n",
      " 11  B        511 non-null    float64\n",
      " 12  LSTAT    511 non-null    float64\n",
      " 13  MEDV     511 non-null    float64\n",
      "dtypes: float64(11), int64(3)\n",
      "memory usage: 56.0 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "05f3b25a-7619-4ae0-911c-c88b85473dae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CRIM</th>\n",
       "      <th>ZN</th>\n",
       "      <th>INDUS</th>\n",
       "      <th>CHAS</th>\n",
       "      <th>NOX</th>\n",
       "      <th>RM</th>\n",
       "      <th>AGE</th>\n",
       "      <th>DIS</th>\n",
       "      <th>RAD</th>\n",
       "      <th>TAX</th>\n",
       "      <th>PTRATIO</th>\n",
       "      <th>B</th>\n",
       "      <th>LSTAT</th>\n",
       "      <th>MEDV</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>511.000000</td>\n",
       "      <td>511.000000</td>\n",
       "      <td>511.000000</td>\n",
       "      <td>511.000000</td>\n",
       "      <td>511.000000</td>\n",
       "      <td>506.000000</td>\n",
       "      <td>511.000000</td>\n",
       "      <td>511.000000</td>\n",
       "      <td>511.000000</td>\n",
       "      <td>511.000000</td>\n",
       "      <td>511.000000</td>\n",
       "      <td>511.000000</td>\n",
       "      <td>511.000000</td>\n",
       "      <td>511.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.584139</td>\n",
       "      <td>11.252446</td>\n",
       "      <td>11.151096</td>\n",
       "      <td>0.068493</td>\n",
       "      <td>0.554757</td>\n",
       "      <td>6.287589</td>\n",
       "      <td>68.616243</td>\n",
       "      <td>3.783876</td>\n",
       "      <td>9.485323</td>\n",
       "      <td>407.440313</td>\n",
       "      <td>18.500000</td>\n",
       "      <td>356.600900</td>\n",
       "      <td>12.879550</td>\n",
       "      <td>22.682192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.564433</td>\n",
       "      <td>23.234838</td>\n",
       "      <td>6.828175</td>\n",
       "      <td>0.252838</td>\n",
       "      <td>0.115310</td>\n",
       "      <td>0.703802</td>\n",
       "      <td>28.099130</td>\n",
       "      <td>2.098631</td>\n",
       "      <td>8.688469</td>\n",
       "      <td>167.903532</td>\n",
       "      <td>2.200348</td>\n",
       "      <td>90.882679</td>\n",
       "      <td>7.797416</td>\n",
       "      <td>9.484262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.006320</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.460000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.385000</td>\n",
       "      <td>3.561000</td>\n",
       "      <td>2.900000</td>\n",
       "      <td>1.129600</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>187.000000</td>\n",
       "      <td>12.600000</td>\n",
       "      <td>0.320000</td>\n",
       "      <td>1.730000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.082325</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.190000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.449000</td>\n",
       "      <td>5.885500</td>\n",
       "      <td>45.050000</td>\n",
       "      <td>2.100350</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>279.500000</td>\n",
       "      <td>17.400000</td>\n",
       "      <td>374.710000</td>\n",
       "      <td>7.065000</td>\n",
       "      <td>17.050000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.261690</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.690000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.538000</td>\n",
       "      <td>6.209000</td>\n",
       "      <td>77.300000</td>\n",
       "      <td>3.152300</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>330.000000</td>\n",
       "      <td>19.100000</td>\n",
       "      <td>391.340000</td>\n",
       "      <td>11.450000</td>\n",
       "      <td>21.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.621175</td>\n",
       "      <td>12.500000</td>\n",
       "      <td>18.100000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.624000</td>\n",
       "      <td>6.629750</td>\n",
       "      <td>94.050000</td>\n",
       "      <td>5.118000</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>666.000000</td>\n",
       "      <td>20.200000</td>\n",
       "      <td>396.210000</td>\n",
       "      <td>17.105000</td>\n",
       "      <td>25.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>88.976200</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>27.740000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.871000</td>\n",
       "      <td>8.780000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>12.126500</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>711.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>396.900000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>67.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             CRIM          ZN       INDUS        CHAS         NOX          RM  \\\n",
       "count  511.000000  511.000000  511.000000  511.000000  511.000000  506.000000   \n",
       "mean     3.584139   11.252446   11.151096    0.068493    0.554757    6.287589   \n",
       "std      8.564433   23.234838    6.828175    0.252838    0.115310    0.703802   \n",
       "min      0.006320    0.000000    0.460000    0.000000    0.385000    3.561000   \n",
       "25%      0.082325    0.000000    5.190000    0.000000    0.449000    5.885500   \n",
       "50%      0.261690    0.000000    9.690000    0.000000    0.538000    6.209000   \n",
       "75%      3.621175   12.500000   18.100000    0.000000    0.624000    6.629750   \n",
       "max     88.976200  100.000000   27.740000    1.000000    0.871000    8.780000   \n",
       "\n",
       "              AGE         DIS         RAD         TAX     PTRATIO           B  \\\n",
       "count  511.000000  511.000000  511.000000  511.000000  511.000000  511.000000   \n",
       "mean    68.616243    3.783876    9.485323  407.440313   18.500000  356.600900   \n",
       "std     28.099130    2.098631    8.688469  167.903532    2.200348   90.882679   \n",
       "min      2.900000    1.129600    1.000000  187.000000   12.600000    0.320000   \n",
       "25%     45.050000    2.100350    4.000000  279.500000   17.400000  374.710000   \n",
       "50%     77.300000    3.152300    5.000000  330.000000   19.100000  391.340000   \n",
       "75%     94.050000    5.118000   24.000000  666.000000   20.200000  396.210000   \n",
       "max    100.000000   12.126500   24.000000  711.000000   23.000000  396.900000   \n",
       "\n",
       "            LSTAT        MEDV  \n",
       "count  511.000000  511.000000  \n",
       "mean    12.879550   22.682192  \n",
       "std      7.797416    9.484262  \n",
       "min      1.730000    5.000000  \n",
       "25%      7.065000   17.050000  \n",
       "50%     11.450000   21.200000  \n",
       "75%     17.105000   25.000000  \n",
       "max     76.000000   67.000000  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "60870c37-b2a3-41c7-8c3b-039d69153a15",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CRIM       0\n",
       "ZN         0\n",
       "INDUS      0\n",
       "CHAS       0\n",
       "NOX        0\n",
       "RM         5\n",
       "AGE        0\n",
       "DIS        0\n",
       "RAD        0\n",
       "TAX        0\n",
       "PTRATIO    0\n",
       "B          0\n",
       "LSTAT      0\n",
       "MEDV       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "07a94434-d220-40ab-9910-56781bdec05a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1200x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Correlation heatmap\n",
    "plt.figure(figsize=(12, 8))\n",
    "sns.heatmap(df.corr(), annot=True, cmap=\"coolwarm\")\n",
    "plt.title(\"Correlation Matrix\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d979c66-bf20-4c73-a56f-c73c740cee77",
   "metadata": {},
   "source": [
    "## Price Prediction with Random Forest Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7bdb3ef2-4e4d-42f8-8243-476fd34dd0fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Features and target\n",
    "X = df.drop(columns=['MEDV'])\n",
    "y = df['MEDV']\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "73eaefbb-9b78-47b7-97fc-301095056301",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestRegressor</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(random_state=42)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor(random_state=42)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Model training\n",
    "rf_regressor = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "rf_regressor.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "79084a08-0683-4bc1-bdc8-6d25abfb24c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Evaluation\n",
    "y_pred = rf_regressor.predict(X_test)\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n",
    "r2 = r2_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "29d9a7b3-1f0c-4669-9ec5-f94757fd44de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 2.82, RMSE: 5.33, R²: 0.67\n"
     ]
    }
   ],
   "source": [
    "print(f\"MAE: {mae:.2f}, RMSE: {rmse:.2f}, R²: {r2:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "006f8b16-c175-4fb0-ac21-1972c1993d4b",
   "metadata": {},
   "source": [
    "## Fraud Detection with Random Forest Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8eab4179-6cf7-417d-81c9-357237f50cd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create synthetic fraud label\n",
    "df['FRAUD'] = 0\n",
    "suspicious = (df['MEDV'] > 40) & (df['LSTAT'] > 20) & (df['RM'] < 6)\n",
    "df.loc[suspicious, 'FRAUD'] = 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3aa31abe-15e0-464a-816d-0dab6333d152",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Features and labels\n",
    "X_fraud = df.drop(columns=['MEDV', 'FRAUD'])\n",
    "y_fraud = df['FRAUD']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22bc9b0c-e199-4061-aac6-4f081abd1e8d",
   "metadata": {},
   "source": [
    "### Standaerdize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "bf245c05-5175-4d85-b075-766c37bd730c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "scaler = StandardScaler()\n",
    "X_fraud_scaled = scaler.fit_transform(X_fraud)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba5617ca-5f24-427f-9165-64bb8964ae1b",
   "metadata": {},
   "source": [
    "### Split the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "578d25ec-1131-4964-af9b-60d09a12403c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "Xf_train, Xf_test, yf_train, yf_test = train_test_split(X_fraud_scaled, y_fraud, test_size=0.2, random_state=42, stratify=y_fraud)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "229f4332-138e-46d3-9079-74c475c9d9c4",
   "metadata": {},
   "source": [
    "### Train the classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "355264c7-ad0f-4fb3-83ec-6995d0a267a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=42)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(random_state=42)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train classifier\n",
    "rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "rf_classifier.fit(Xf_train, yf_train)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40f723a3-0b7d-4760-b40f-d24351a22efe",
   "metadata": {},
   "source": [
    "### Evaluate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "92ecb17d-5472-4e3a-8f4b-6391371e0951",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00       103\n",
      "\n",
      "    accuracy                           1.00       103\n",
      "   macro avg       1.00      1.00      1.00       103\n",
      "weighted avg       1.00      1.00      1.00       103\n",
      "\n",
      "Confusion Matrix:\n",
      " [[103]]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Cptzeph\\Desktop\\Programs\\python\\DreamscapeRealty\\.dream\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:407: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "# Evaluate\n",
    "yf_pred = rf_classifier.predict(Xf_test)\n",
    "print(classification_report(yf_test, yf_pred))\n",
    "print(\"Confusion Matrix:\\n\", confusion_matrix(yf_test, yf_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a87a455-b216-4761-9a9f-d8128db9cb8a",
   "metadata": {},
   "source": [
    "## House Recommendation using KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "df73c4ea-feb2-4eeb-bd7f-8bc0efd843a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Features for recommendation\n",
    "features_for_knn = ['RM', 'LSTAT', 'PTRATIO', 'TAX', 'MEDV']\n",
    "house_data = df[features_for_knn]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c654c03-dd3f-4699-aa43-5605f04c8a23",
   "metadata": {},
   "source": [
    "###  Scale data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "861398b0-6299-4111-a9b2-4291aed834f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "scaler_knn = StandardScaler()\n",
    "house_data_scaled = scaler_knn.fit_transform(house_data)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f16f6c62-74f2-47ed-9f2f-9e5b1f08f32a",
   "metadata": {},
   "source": [
    "###  Handle missing values (if any)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "337a9f23-660e-4a4c-b996-6e5852dae47c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "imputer_knn = SimpleImputer(strategy='median')\n",
    "house_data_imputed = imputer_knn.fit_transform(house_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33d7fe5a-3450-4233-9dda-c772f3e63c70",
   "metadata": {},
   "source": [
    "### Standardize data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a80c43f0-702c-44d4-ab54-7875ae02e168",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "scaler_knn = StandardScaler()\n",
    "house_data_scaled = scaler_knn.fit_transform(house_data_imputed)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a194f701-1100-41be-91c1-0d21885167cc",
   "metadata": {},
   "source": [
    "### Fit KNN model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "497909d1-7133-49dd-b5bd-6dc15bf45533",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>NearestNeighbors()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>NearestNeighbors</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.neighbors.NearestNeighbors.html\">?<span>Documentation for NearestNeighbors</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>NearestNeighbors()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "NearestNeighbors()"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "knn = NearestNeighbors(n_neighbors=5)\n",
    "knn.fit(house_data_scaled)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3c46eec-e34d-41d1-8100-28b6a07439a9",
   "metadata": {},
   "source": [
    "### Define user preference \n",
    "\n",
    "#### RM - Average number of rooms per dwelling (higher = bigger house)\n",
    "#### LSTAT - % of population that is lower status (poverty rate in the area) — lower is better\n",
    "#### PTRATIO - Pupil-Teacher Ratio (in local schools) — lower means better education quality\n",
    "#### TAX - \tProperty tax rate — lower is cheaper annually\n",
    "#### MEDV - Median value of the house (in $1000s) — your max price limit\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "8927abbc-db91-4d72-ac2f-3657cce718b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "user_input = pd.DataFrame([{\n",
    "    'RM': 6.0,\n",
    "    'LSTAT': 10.0,\n",
    "    'PTRATIO': 18.0,\n",
    "    'TAX': 400.0,\n",
    "    'MEDV': 30.0\n",
    "}])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "fe3af878-5c85-4dba-a8da-f253f7a58d04",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Impute and scale user input\n",
    "user_input_imputed = imputer_knn.transform(user_input)\n",
    "user_scaled = scaler_knn.transform(user_input_imputed)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ab29f5d-812e-4db3-a746-4298a9606f24",
   "metadata": {},
   "source": [
    "### Find nearest neighbors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "fd607a86-24f0-4a8e-b778-e5c09174c56d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "distances, indices = knn.kneighbors(user_scaled)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4b233f5-34d7-4f98-ad70-3604ace48a0f",
   "metadata": {},
   "source": [
    "### Show recommendations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "05e9ac12-8594-4aaa-bfa7-a1a7b41557f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "🏡 Recommended Houses Based on Your Preferences:\n",
      "      RM  LSTAT  PTRATIO    TAX  MEDV\n",
      "0  5.981  11.65     17.4  307.0  24.3\n",
      "1  6.086  10.88     17.4  307.0  24.0\n",
      "2  6.273   6.78     18.7  398.0  24.1\n",
      "3  6.108   9.16     19.1  330.0  24.3\n",
      "4  5.926  13.59     19.2  391.0  24.5\n"
     ]
    }
   ],
   "source": [
    "\n",
    "recommended_houses = pd.DataFrame(house_data_imputed[indices[0]], columns=features_for_knn).reset_index(drop=True)\n",
    "print(\"🏡 Recommended Houses Based on Your Preferences:\")\n",
    "print(recommended_houses)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "966ed89b-214d-4387-ab0c-60facbc01678",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
